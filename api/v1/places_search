#!/usr/bin/python3
"""
View for Place objects that handles all default RestFul API actions.
"""

from api.v1.views import app_views
from flask import abort, jsonify, make_response, request
from models import storage
from models.amenity import Amenity
from models.city import City
from models.place import Place
from models.state import State
from models.user import User


@app_views.route('/places_search', methods=['POST'], strict_slashes=False)
def places_search():
    """Retrieves the list of all Place objects based on the JSON in the body
    of the request."""
    data = request.get_json()
    if data is None:
        abort(400, 'Not a JSON')
    states = data.get('states')
    cities = data.get('cities')
    amenities = data.get('amenities')
    if not states and not cities and not amenities:
        places = storage.all('Place').values()
        return jsonify([place.to_dict() for place in places])
    places = set()
    if states:
        for state_id in states:
            state = storage.get('State', state_id)
            if state is None:
                continue
            for city in state.cities:
                if not cities or city.id not in cities:
                    places |= set(city.places)
    if cities:
        for city_id in cities:
            city = storage.get('City', city_id)
            if city is None:
                continue
            places |= set(city.places)
    if amenities:
        amenity_objs = [storage.get('Amenity', amenity_id)
                        for amenity_id in amenities]
        for place in places.copy():
            place_amenities = place.amenities
            if not all([a in place_amenities for a in amenity_objs]):
                places.remove(place)
    places = [place.to_dict() for place in places]
    return jsonify(places)


@app_views.route('/cities/<city_id>/places', methods=['GET'],
                 strict_slashes=False)
def city_places(city_id):
    """Retrieves the list of all Place objects of a City"""
    city = storage.get('City', city_id)
    if city is None:
        abort(404)
    places = [place.to_dict() for place in city.places]
    return jsonify(places)
