from flask import abort, jsonify, request
from api.v1.views import app_views
from models import storage, State, City, Place, Amenity


@app_views.route('/places_search', methods=['POST'])
def search_places():
    """Search for places based on state, city, and/or amenity criteria"""

    # Ensure that the request body is valid JSON
    try:
        search_data = request.get_json()
    except Exception:
        abort(400, 'Not a JSON')

    # Retrieve lists of State, City, and Amenity IDs from the request data
    state_ids = search_data.get('states', [])
    city_ids = search_data.get('cities', [])
    amenity_ids = search_data.get('amenities', [])

    # Retrieve all Place objects if no search criteria were specified
    if not any((state_ids, city_ids, amenity_ids)):
        places = storage.all(Place).values()
        return jsonify([p.to_dict() for p in places])

    # Retrieve all Place objects for each State ID in the search criteria
    places = []
    for state_id in state_ids:
        state = storage.get(State, state_id)
        if state is not None:
            for city in state.cities:
                if city not in places:
                    places.extend(city.places)

    # Retrieve all Place objects for each City ID in the search criteria
    for city_id in city_ids:
        city = storage.get(City, city_id)
        if city is not None:
            if city not in places:
                places.extend(city.places)

    # Filter the list of places based on the amenity criteria
    if amenity_ids:
        places = [p for p in places if set(amenity_ids).issubset(p.amenities)]

    # Return the list of matching places as JSON
    return jsonify([p.to_dict() for p in places])
